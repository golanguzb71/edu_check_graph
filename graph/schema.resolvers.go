package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"edu_test_graph/graph/model"
	utils "edu_test_graph/internal"
	"fmt"
	"strconv"
)

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, name string) (*model.Response, error) {
	var coll model.Collection
	coll.Name = name
	err := r.CollectionService.CreateCollection(&coll)
	return utils.AbsResponseChecking(err, "created")
}

// UpdateCollection is the resolver for the updateCollection field.
func (r *mutationResolver) UpdateCollection(ctx context.Context, id string, name string) (*model.Response, error) {
	var coll model.Collection
	coll.ID = id
	coll.Name = name
	err := r.CollectionService.UpdateCollection(&coll)
	return utils.AbsResponseChecking(err, "updated")
}

// DeleteCollection is the resolver for the deleteCollection field.
func (r *mutationResolver) DeleteCollection(ctx context.Context, id string) (*model.Response, error) {
	err := r.CollectionService.DeleteCollection(id)
	return utils.AbsResponseChecking(err, "deleted")
}

// GetCollection is the resolver for the getCollection field.
func (r *queryResolver) GetCollection(ctx context.Context, id string) (*model.FullCollection, error) {
	realId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	collection, err := r.CollectionService.GetCollection(realId)
	if err != nil {
		return nil, err
	}
	return collection, nil
}

// ListCollections is the resolver for the listCollections field.
func (r *queryResolver) ListCollections(ctx context.Context) ([]*model.Collection, error) {
	panic(fmt.Errorf("not implemented: ListCollections - listCollections"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
