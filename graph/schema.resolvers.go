package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"edu_test_graph/graph/model"
	utils "edu_test_graph/internal"
	"strconv"
)

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, name string) (*model.Response, error) {
	var coll model.Collection
	coll.Name = name
	err := r.CollectionService.CreateCollection(&coll)
	return utils.AbsResponseChecking(err, "created")
}

// UpdateCollection is the resolver for the updateCollection field.
func (r *mutationResolver) UpdateCollection(ctx context.Context, id string, name string) (*model.Response, error) {
	var coll model.Collection
	coll.ID = id
	coll.Name = name
	err := r.CollectionService.UpdateCollection(&coll)
	return utils.AbsResponseChecking(err, "updated")
}

// DeleteCollection is the resolver for the deleteCollection field.
func (r *mutationResolver) DeleteCollection(ctx context.Context, id string) (*model.Response, error) {
	err := r.CollectionService.DeleteCollection(id)
	return utils.AbsResponseChecking(err, "deleted")
}

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, name string, teacherName string, level model.GroupLevel) (*model.Response, error) {
	var group model.Group
	group.Name = name
	group.TeacherName = teacherName
	group.Level = level.String()
	err := r.GroupService.CreateGroup(&group)
	return utils.AbsResponseChecking(err, "created")
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, name string, teacherName string, level model.GroupLevel) (*model.Response, error) {
	var group model.Group
	group.ID = id
	group.Name = name
	group.TeacherName = teacherName
	group.Level = level.String()
	err := r.GroupService.UpdateGroup(&group)
	return utils.AbsResponseChecking(err, "updated")
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*model.Response, error) {
	realId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	err = r.GroupService.DeleteGroup(realId)
	return utils.AbsResponseChecking(err, "deleted")
}

// CreateTest is the resolver for the createTest field.
func (r *mutationResolver) CreateTest(ctx context.Context, collectionID string, questions []*model.TestQuestion) (*model.Response, error) {
	err := r.QuestionService.CreateTest(ctx, collectionID, questions)
	return utils.AbsResponseChecking(err, "test created and linked to this collection.")
}

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, collectionID string, questionField string) (*model.Response, error) {
	var question model.Question
	question.QuestionField = questionField
	question.CollectionID = collectionID
	err := r.QuestionService.CreateQuestion(&question)
	return utils.AbsResponseChecking(err, "created and linked to "+collectionID)
}

// CreateAnswer is the resolver for the createAnswer field.
func (r *mutationResolver) CreateAnswer(ctx context.Context, questionID string, answer model.AnswerInput) (*model.Response, error) {
	var answerModel model.Answer
	answerModel.AnswerField = answer.AnswerField
	answerModel.IsTrue = answer.IsTrue
	answerModel.QuestionID = questionID
	err := r.AnswerService.CreateAnswer(&answerModel)
	return utils.AbsResponseChecking(err, "created and linked to "+questionID)
}

// DeleteQuestion is the resolver for the deleteQuestion field.
func (r *mutationResolver) DeleteQuestion(ctx context.Context, questionID string) (*model.Response, error) {
	realId, err := strconv.Atoi(questionID)
	if err != nil {
		return nil, err
	}
	err = r.QuestionService.DeleteQuestion(realId)
	return utils.AbsResponseChecking(err, "deleted")
}

// DeleteAnswer is the resolver for the deleteAnswer field.
func (r *mutationResolver) DeleteAnswer(ctx context.Context, answerID string) (*model.Response, error) {
	realId, err := strconv.Atoi(answerID)
	if err != nil {
		return nil, err
	}
	err = r.AnswerService.DeleteAnswer(realId)
	return utils.AbsResponseChecking(err, "deleted")
}

// InsertTestAnswer is the resolver for the insertTestAnswer field.
func (r *mutationResolver) InsertTestAnswer(ctx context.Context, answers model.AnswerInsert) (*model.CommonResponse, error) {
	return r.AnswerService.InsertTestAnswer(answers)
}

// GetCollection is the resolver for the getCollection field.
func (r *queryResolver) GetCollection(ctx context.Context, id string) (*model.FullCollection, error) {
	realId, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	collection, err := r.CollectionService.GetCollection(realId)
	if err != nil {
		return nil, err
	}
	return collection, nil
}

// ListCollections is the resolver for the listCollections field.
func (r *queryResolver) ListCollections(ctx context.Context) ([]*model.Collection, error) {
	return r.CollectionService.GetCollections()
}

// GetGroups is the resolver for the getGroups field.
func (r *queryResolver) GetGroups(ctx context.Context, byID *string, orderByLevel *bool) ([]*model.Group, error) {
	group, err := r.GroupService.GetGroup(byID, orderByLevel)
	if err != nil {
		return nil, err
	}
	return group, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
